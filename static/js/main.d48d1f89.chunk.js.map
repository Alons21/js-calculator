{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","lastNum","currentNum","typeOfOperation","isResult","nextNumIsFirstDecimal","currentNumIsEmpty","decimalCount","hadleNumTyped","bind","handleOperatorClick","handleEqualClick","num","this","handleClear","setState","parseFloat","toFixed","operator","expresionToCalculate","keyHandlerList","i","push","keyEventName","KEYPRESS","keyValue","toString","onKeyHandle","className","Helmet","src","handleDotClick","id","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d48d1f89.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport KeyHandler, { KEYPRESS } from 'react-key-handler';\nimport Helmet from 'react-helmet'\nclass App extends React.Component {\n  constructor(props) {\n    super(props); \n    this.state = {\n      lastNum: 0,\n      currentNum: 0,\n      typeOfOperation: null,\n      isResult: false,\n      nextNumIsFirstDecimal: false,\n      currentNumIsEmpty: true,\n      decimalCount: 0,\n    };\n    this.hadleNumTyped.bind(this);\n    this.handleOperatorClick.bind(this);\n    this.handleEqualClick.bind(this);\n  }\n  hadleNumTyped(num) {\n    if (this.state.isResult) {\n      this.handleClear();\n    }\n    if (this.state.nextNumIsFirstDecimal && this.state.decimalCount === 0) {\n      this.setState((state) => ({\n        isResult: false,\n        currentNum: parseFloat(state.currentNum + \".\" + num).toFixed(1),\n        nextNumIsFirstDecimal: false,\n        currentNumIsEmpty: false,\n        decimalCount: state.decimalCount++,\n      }));\n    } else if (this.state.decimalCount > 0) {\n      this.setState((state) => ({\n        isResult: false,\n        currentNum: parseFloat(state.currentNum + num).toFixed(state.decimalCount),\n        nextNumIsFirstDecimal: false,\n        currentNumIsEmpty: false,\n        decimalCount: state.decimalCount++,\n      }));\n    } else {\n      this.setState((state) => ({\n        isResult: false,\n        currentNum: parseFloat(state.currentNum + num),\n        currentNumIsEmpty: false,\n      }));\n    }\n  }\n  handleOperatorClick(operator) {\n    if (this.state.isResult) {\n      this.setState((state) => ({\n        isResult: false,\n        lastNum: state.currentNum,\n        currentNum: 0,\n        typeOfOperation: operator,\n        nextNumIsFirstDecimal: false,\n        currentNumIsEmpty: true,\n        decimalCount: 0,\n      }))\n    }\n    if (this.state.lastNum !== 0 && !this.state.currentNumIsEmpty) {\n        this.handleEqualClick();\n    } else if (this.state.currentNumIsEmpty && this.state.lastNum) {\n      if (operator === '-') {\n        this.setState(() => ({\n          currentNum: operator,\n          currentNumIsEmpty: true,\n          isResult: false,\n        }))\n      } else {\n        this.setState(() => ({\n          currentNum: 0,\n          currentNumIsEmpty: true,\n          typeOfOperation: operator,\n        }))\n      }\n    }\n    if (!this.state.currentNumIsEmpty) {\n      this.setState((state) => ({\n        isResult: false,\n        lastNum: state.currentNum,\n        currentNum: 0,\n        typeOfOperation: operator,\n        nextNumIsFirstDecimal: false,\n        currentNumIsEmpty: true,\n        decimalCount: 0,\n      }))\n    }\n  }\n  handleEqualClick() {\n    this.setState((state) => {\n      let expresionToCalculate;\n      switch (state.typeOfOperation) {\n        case \"+\":\n          expresionToCalculate = parseFloat(state.lastNum) + parseFloat(state.currentNum)\n          break;\n        case \"-\":\n          expresionToCalculate = parseFloat(state.lastNum) - parseFloat(state.currentNum)\n          break;\n        case \"*\":\n          expresionToCalculate = parseFloat(state.lastNum) * parseFloat(state.currentNum)\n          break;\n        case \"/\":\n          expresionToCalculate = parseFloat(state.lastNum) / parseFloat(state.currentNum)\n          break;\n        default:\n          expresionToCalculate = state.currentNum;\n      }\n      return ({\n        lastNum: 0,\n        currentNum: expresionToCalculate,\n        typeOfOperation: null,\n        isResult: true,\n        nextNumIsFirstDecimal: false,\n        currentNumIsEmpty: true,\n        decimalCount: 0,\n      })})\n  }\n  handleDotClick() {\n    if (!this.state.decimalCount > 0) {\n        this.setState((state) => ({\n        nextNumIsFirstDecimal: true,\n        currentNumIsEmpty: false,\n      }))\n    }\n  }\n  handleClear() {\n    this.setState({\n      currentNum: 0,\n      typeOfOperation: null,\n      lastNum: 0,\n      nextNumIsFirstDecimal: false,\n      currentNumIsEmpty: true,\n      decimalCount: 0,\n    })\n  }\n  render() {\n    const keyHandlerList = [];\n    for (let i = 0; i <= 9; i++) {\n        keyHandlerList.push(<KeyHandler keyEventName={KEYPRESS}\n        keyValue={i.toString()}\n        onKeyHandle={() => this.hadleNumTyped(i.toString())} />);\n    }\n    return (\n<div className=\"App\">\n        <Helmet>\n          <script src=\"https://cdn.freecodecamp.org/testable-projects-fcc/v1/bundle.js\"></script>\n        </Helmet>\n        <KeyHandler keyEventName={KEYPRESS}\n        keyValue=\"+\"\n        onKeyHandle={() => this.handleOperatorClick(\"+\")} />\n        <KeyHandler keyEventName={KEYPRESS}\n        keyValue=\"-\"\n        onKeyHandle={() => this.handleOperatorClick(\"-\")} />\n        <KeyHandler keyEventName={KEYPRESS}\n        keyValue=\"*\"\n        onKeyHandle={() => this.handleOperatorClick(\"*\")} />\n        <KeyHandler keyEventName={KEYPRESS}\n        keyValue=\"/\"\n        onKeyHandle={() => this.handleOperatorClick(\"/\")} />\n        <KeyHandler keyEventName={KEYPRESS}\n        keyValue=\".\"\n        onKeyHandle={() => this.handleDotClick()} />\n        {keyHandlerList}\n  <div id=\"calculator-container\">\n    <p id=\"display\">{this.state.lastNum !== 0 && this.state.lastNum}\n    {this.state.typeOfOperation && this.state.typeOfOperation}\n    {this.state.currentNum === '-' && '-'}\n    {this.state.currentNumIsEmpty && !this.state.isResult ? \"_\" : this.state.currentNum}\n    {this.state.nextNumIsFirstDecimal && \".\"}</p>\n          <button id=\"clear\" onClick={() => this.handleClear()}>AC</button>\n          <button id=\"equals\" onClick={() => this.handleEqualClick()}>=</button>\n          <button id=\"one\" onClick={() => this.hadleNumTyped(\"1\")}>1</button>\n          <button id=\"two\" onClick={() => this.hadleNumTyped(\"2\")}>2</button>\n          <button id=\"three\" onClick={() => this.hadleNumTyped(\"3\")}>3</button>\n          <button id=\"four\" onClick={() => this.hadleNumTyped(\"4\")}>4</button>\n          <button id=\"five\" onClick={() => this.hadleNumTyped(\"5\")}>5</button>\n          <button id=\"six\" onClick={() => this.hadleNumTyped(\"6\")}>6</button>\n          <button id=\"seven\" onClick={() => this.hadleNumTyped(\"7\")}>7</button>\n          <button id=\"eight\" onClick={() => this.hadleNumTyped(\"8\")}>8</button>\n          <button id=\"nine\" onClick={() => this.hadleNumTyped(\"9\")}>9</button>\n          <button id=\"zero\" onClick={() => this.hadleNumTyped(\"0\")}>0</button>\n          <button id=\"decimal\" onClick={() => this.handleDotClick()}>.</button>\n          <div id=\"operator-container\">\n            <button id=\"add\" onClick={() => this.handleOperatorClick(\"+\")}>+</button>\n            <button id=\"subtract\" onClick={() => this.handleOperatorClick(\"-\")}>-</button>\n            <button id=\"multiply\" onClick={() => this.handleOperatorClick(\"*\")}>x</button>\n            <button id=\"divide\" onClick={() => this.handleOperatorClick(\"/\")}>÷</button>\n          </div>\n  </div>\n  <p id=\"author\">Made by @alons_21</p>\n</div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}